name: Validate Resources

on:
  push:
    paths:
      - 'resources.json'
  pull_request:
    paths:
      - 'resources.json'
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Validate JSON Schema
        run: |
          python - <<EOF
          import json
          import jsonschema
          from datetime import datetime

          # Define the schema
          schema = {
              "type": "object",
              "required": ["repositories", "papers", "websites", "courses", "books", "datasets", "presentations", "metadata"],
              "properties": {
                  "repositories": {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "required": ["title", "url", "tags", "dateAdded"],
                          "properties": {
                              "title": {"type": "string"},
                              "url": {
                                  "oneOf": [
                                      {"type": "string"},
                                      {"type": "array", "items": {"type": "string"}}
                                  ]
                              },
                              "description": {"type": "string"},
                              "tags": {
                                  "type": "array",
                                  "items": {"type": "string"}
                              },
                              "dateAdded": {
                                  "type": "string",
                                  "pattern": "^\d{4}-\d{2}-\d{2}$"
                              }
                          }
                      }
                  },
                  "papers": {"type": "array"},
                  "websites": {"type": "array"},
                  "courses": {"type": "array"},
                  "books": {"type": "array"},
                  "datasets": {"type": "array"},
                  "presentations": {"type": "array"},
                  "metadata": {
                      "type": "object",
                      "required": ["lastUpdated", "counts"],
                      "properties": {
                          "lastUpdated": {"type": "string"},
                          "counts": {
                              "type": "object",
                              "properties": {
                                  "repositories": {"type": "number"},
                                  "papers": {"type": "number"},
                                  "websites": {"type": "number"},
                                  "courses": {"type": "number"},
                                  "books": {"type": "number"},
                                  "datasets": {"type": "number"},
                                  "presentations": {"type": "number"}
                              }
                          }
                      }
                  }
              }
          }

          # Load and validate the JSON
          with open('resources.json', 'r') as f:
              data = json.load(f)
              
          jsonschema.validate(data, schema)

          # Validate counts
          for category in data['metadata']['counts']:
              actual_count = len(data.get(category, []))
              stored_count = data['metadata']['counts'][category]
              assert actual_count == stored_count, f"Count mismatch for {category}: stored={stored_count}, actual={actual_count}"

          print("âœ… JSON validation successful!")
          EOF